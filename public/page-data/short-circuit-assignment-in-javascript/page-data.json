{"componentChunkName":"component---src-templates-blog-post-js","path":"/short-circuit-assignment-in-javascript/","result":{"data":{"markdownRemark":{"html":"<p>This article is also cross-posted in â€”</p>\n<p>DEV - <a href=\"https://dev.to/flexdinesh/short-circuit-assignment-in-javascript--4k80\">Short Circuit Assignment in JavaScript</a></p>\n<hr>\n<p><img src=\"https://image.ibb.co/c9duVn/short_circuit_alt.jpg\" alt=\"JS short circuit assignment\"></p>\n<p><strong>tldr;</strong> <em>Assign default value to a variable using short circuit evaluation, when expected value is not found.</em></p>\n<p>JavaScript is amazing. But most of the times we end up scratching our heads for accomplishing a simple task, like, <em>assigning a default value to a variable when the expected value is not found (probably null/undefined).</em></p>\n<p>Let's take this example,</p>\n<pre><code class=\"language-js\">const person = {\n    name: 'Jack'\n};\n\nconst name = person.name;\nconst greetings = 'Hello' + ', ' + name + '!';\nconsole.log(greetings) // => 'Hello, Jack!'\n</code></pre>\n<p>Now if the name key is not available in person object,</p>\n<pre><code class=\"language-js\">const person = {};\n\nconst name = person.name; // name is undefined here\nconst greetings = 'Hello' + ', ' + name + '!';\nconsole.log(greetings) // => 'Hello, undefined!'\n</code></pre>\n<p>This problem is very common in JavaScript world. We usually tackle scenarios like this by assigning default values.</p>\n<pre><code class=\"language-js\">// we either use if case\nlet name = 'Sunshine'; // default value\nif (person &#x26;&#x26; person.name) {\n    name = person.name;\n}\n\n// or we use ternary operator\nconst name = person &#x26;&#x26; person.name ? person.name : 'Sunshine';\n\nconst greetings = 'Hello' + ', ' + name + '!'; // name will never be undefined now\nconsole.log(greetings) // => 'Hello, Jack!'\n</code></pre>\n<p>The above case was a simple scenario because we had to check only one variable. But if we need to assign based on multiple variables, then we end up writing messy <em>not-easy-to-read</em> code.</p>\n<pre><code class=\"language-js\">let foo, bar, baz;\n\n// if case mess\nlet name;\nif (foo) name = foo;\nelse if (bar) name = bar;\nelse if (baz) name = baz;\nelse name = 'Sunshine';\n\n// ternary operator nightmare\nconst name = foo ? foo : (bar ? bar : (baz ? baz : 'Sunshine'));\n</code></pre>\n<p>To save the world from messy code, <strong>there's one more <em>sweeter</em> trick to assign default values.</strong></p>\n<h2>Short Circuit Assignment âœ¨</h2>\n<p>This is a shorter and cleaner way of assigning default values in JavaScript. This works based on short-circuit evaluation of logical operators where the <strong>first <em>truthy</em> value is returned</strong>.</p>\n<pre><code class=\"language-js\">const name = person.name || 'Sunshine';\n\n// if you're not sure if person object is defined\nconst name = (person &#x26;&#x26; person.name) || 'Sunshine';\n\n// can be used with as many variables as needed\nlet foo, bar, baz;\nbar = 'Bar-da-Jack';\n// first truthy value will be assigned to name\nconst name = foo || bar || baz || 'John'; // => name = 'Bar-da-Jack'\n</code></pre>\n<p>The evaluation circuit breaks when a truthy value is found, and is returned to the assignment. </p>\n<p>Any value which is not <code>false</code>, <code>0</code>, <code>''</code>, <code>\"\"</code>, <code>null</code>, <code>undefined</code> and <code>NaN</code> is considered to be truthy in JavaScript.</p>\n<p><strong>Note:</strong> <em>Keep in mind, if you're expecting <code>0</code> as a value in a variable, this trick might not work as expected, as <code>0</code> is considered falsy in JavaScript.</em></p>\n<p>So, fellow comrades, short-circuit and save the JavaScript world from messy code structures, one line at a time! ðŸŽ‰</p>","frontmatter":{"title":"Short Circuit Assignment in JavaScript","canonicalURL":"https://dev.to/flexdinesh/short-circuit-assignment-in-javascript--4k80","date":"Feb 17, 2018","noPage":null}}},"pageContext":{"slug":"/short-circuit-assignment-in-javascript/"}},"staticQueryHashes":["1381026181","3065158460"]}