{"componentChunkName":"component---src-templates-blog-post-js","path":"/responsive-react-components/","result":{"data":{"markdownRemark":{"html":"<p>This article is also cross-posted in ‚Äî</p>\n<p>DEV - <a href=\"https://dev.to/flexdinesh/introducing-responsive-react-components--1a6a\">Introducing Responsive React Components</a></p>\n<p>HackerNoon - <a href=\"https://hackernoon.com/introducing-responsive-react-components-f6cd14976570\">Introducing Responsive React Components</a></p>\n<p>codeburst - <a href=\"https://codeburst.io/introducing-responsive-react-components-93524b02601e\">Introducing Responsive React Components</a></p>\n<hr>\n<p><img src=\"https://image.ibb.co/hXCL70/responsive-react-banner.png\" alt=\"Responsive React Components\"></p>\n<p><strong>TL;DR</strong> - <em>You can render viewport specific components in React with a one-liner</em></p>\n<p>React is awesome and the whole world agrees to it unanimously. Development is a whole lot faster and easier when we look at everything as components. Since everything is JavaScript driven, <strong>React renders only the code that is necessary based on application's state</strong>. It doesn't matter if you have over a thousand components and tens of thousands of lines of code. <strong>If you <a href=\"https://medium.freecodecamp.org/how-to-use-react-lazy-and-suspense-for-components-lazy-loading-8d420ecac58\">lazy load</a> your components, you load only what's necessary for the user and I think that is the biggest win with using React</strong>.</p>\n<p>That being said, have you ever wondered what happens when you write media queries in your React codebase?</p>\n<p><strong>You render elements that's not supposed to be in a particular viewport and hide it using css</strong>.</p>\n<p>In this example</p>\n<pre><code class=\"language-jsx\">import React from 'react'\nimport './Example.style.scss'\n\nconst Example = () => {\n  return (\n    &#x3C;div className=\"example\">\n      &#x3C;div className=\"mobile-only\">I'm a fancy mobile div&#x3C;/div>\n      &#x3C;div className=\"desktop-only\">I'm a heavy desktop div&#x3C;/div>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p><code>Example.style.scss</code> file</p>\n<pre><code class=\"language-scss\">.example {\n  .mobile-only {\n    @media (min-width: 768px) {\n      display: none;\n    }\n  }\n  .desktop-only {\n    @media (max-width: 767px) {\n      display: none;\n    }\n  }\n}\n</code></pre>\n<p>When <code>Example</code> component renders, <strong>both</strong> <code>.mobile-only</code> and <code>.desktop-only</code> elements <strong>will be rendered</strong> in the DOM but <code>.mobile-only</code> div will be hidden in bigger viewports and <code>.desktop-only</code> div will be hidden in smaller viewports with css <code>display: none</code>.</p>\n<p>This is okay if this is small. But in one of the projects I worked, we had a heavy desktop menu and a heavy mobile menu both rendered in all the viewports. <strong>Just the <code>Menu</code> alone should be around <code>20Kb</code> in size</strong> each and we easily had an unwanted <code>20Kb</code> being loaded into the browser for each user. If you have more viewport specific elements, this size is going to keep increasing.</p>\n<h2>Introducing React Socks</h2>\n<p><a href=\"https://github.com/flexdinesh/react-socks\">React Socks</a> is a <strong>minimal React library</strong> to <strong>render components based on viewport</strong>.</p>\n<p>Say goodbye to media-queries. Here's how you can render viewport specific components with an uber-cool syntax.</p>\n<pre><code class=\"language-jsx\">const Example = () => {\n  return (\n    &#x3C;Breakpoint small down>\n      &#x3C;MyAwesomeMobileMenu>\n        This component will render only in mobile devices\n      &#x3C;/MyAwesomeMobileMenu>\n    &#x3C;/Breakpoint>\n  )\n}\n</code></pre>\n<pre><code class=\"language-jsx\">const Example = () => {\n  return (\n    &#x3C;div>\n      &#x3C;Breakpoint small down>\n        &#x3C;div>I will render only in mobile devices&#x3C;/div>\n      &#x3C;/Breakpoint>\n\n      &#x3C;Breakpoint medium only>\n        &#x3C;div>I will render only in tablets (iPad, etc...)&#x3C;/div>\n      &#x3C;/Breakpoint>\n\n      &#x3C;Breakpoint large up>\n        &#x3C;div>I will render in laptops, desktops and everything bigger&#x3C;/div>\n      &#x3C;/Breakpoint>\n    &#x3C;/div>\n  )\n}\n</code></pre>\n<p>And that's not just it. <strong>You can specify your own breakpoints</strong> (as many as you want <strong>wow!</strong>) and use them <strong>according to your project needs</strong>. Also, you will have to <code>setDefaultBreakpoints</code> only once in your project üòé</p>\n<pre><code class=\"language-jsx\">import { setDefaultBreakpoints } from 'react-socks'\n\nsetDefaultBreakpoints([\n  { xs: 0 },\n  { s: 376 },\n  { m: 426 },\n  { l: 769 },\n  { xl: 1025 },\n])\n</code></pre>\n<p>These are my favourite breakpoints</p>\n<pre><code class=\"language-jsx\">setDefaultBreakpoints([{ cats: 0 }, { dinosaurs: 900 }])\n\n&#x3C;Breakpoint cats only>\n  Only cats can render me üêà\n&#x3C;/Breakpoint>\n</code></pre>\n<h4>Reasons why you should use <a href=\"https://github.com/flexdinesh/react-socks\">React Socks</a></h4>\n<ul>\n<li><strong>Render viewport specific</strong> components without hassle</li>\n<li>You can define your <strong>own breakpoints</strong> (Eg. xs, ipad, bigmonitors) and use them</li>\n<li>You can <strong>improve your app performance</strong> if you lazy load your viewport specific components</li>\n<li>Simpler and sweeter <strong>syntax</strong> for ease of use</li>\n</ul>\n<p>The library has been published to <a href=\"https://www.npmjs.com/package/react-socks\">npm</a> and is in alpha version. I'd love to get your feedback and improve it before releasing the first stable version.</p>\n<p><em>Edit: The first stable version has been released on Dec 9, 2018 with performance improvements and SSR support.</em> üéâ</p>\n<p>If you're wondering <strong>why the name React Socks</strong> ü§∑‚Äç‚ôÇÔ∏è</p>\n<p><strong><a href=\"https://github.com/flexdinesh/react-socks\">React Socks</a></strong> wraps your components comfortably to prevent unnecessary render in various viewports, just like how you wrap your feet with socks to prevent cold feet üéâ</p>\n<p>Let's put some fancy <a href=\"https://github.com/flexdinesh/react-socks\">React Socks</a> on and wrap all the components üî•</p>\n<p>You are amazing! Have a great day! ‚ö°Ô∏è</p>","frontmatter":{"title":"Responsive React Components","canonicalURL":"https://dev.to/flexdinesh/introducing-responsive-react-components--1a6a","date":"Nov 20, 2018","noPage":null}}},"pageContext":{"slug":"/responsive-react-components/"}},"staticQueryHashes":["1381026181","3065158460"]}