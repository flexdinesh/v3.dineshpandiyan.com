{"componentChunkName":"component---src-templates-blog-post-js","path":"/accessing-nested-objects-in-javascript/","result":{"data":{"markdownRemark":{"html":"<p>This article is also cross-posted in â€”</p>\n<p>DEV - <a href=\"https://dev.to/flexdinesh/accessing-nested-objects-in-javascript--9m4\">Accessing Nested Objects in JavaScript</a></p>\n<p>HackerNoon - <a href=\"https://hackernoon.com/accessing-nested-objects-in-javascript-f02f1bd6387f\">Accessing Nested Objects in JavaScript</a></p>\n<p>codeburst - <a href=\"https://codeburst.io/accessing-nested-objects-in-javascript-c2ed249fe576\">Accessing Nested Objects in JavaScript</a></p>\n<p>It has been featured in â€”</p>\n<p>DEV - <a href=\"https://dev.to/thepracticaldev/the-7-most-popular-dev-posts-from-the-past-week--31m3\">The 7 Most Popular DEV Posts from the Past Week</a></p>\n<p>codeburst - <a href=\"https://codeburst.io/top-web-software-development-articles-march-1-2018-51ed35890abd\">Top Web &#x26; Software Development Articlesâ€Šâ€”â€ŠMarch 1, 2018</a></p>\n<hr>\n<p><img src=\"https://image.ibb.co/i3ybGS/undefined_access.jpg\" alt=\"undefined error in JavaScript\"></p>\n<p><strong>tldr;</strong> <em>safely access nested objects in JavaScript in a super cool way.</em></p>\n<p>JavaScript is amazing, we all know that already. But a few things in JavaScript are really weird and they make us scratch our heads a lot. One of those things is the confrontation with this error when you try to access a nested object,</p>\n<p><strong><em>Cannot read property 'foo' of undefined</em></strong></p>\n<p>Most of the times when we're working with JavaScript, we'll be dealing with nested objects and often we'll be needing to access the innermost nested values safely.</p>\n<p>Let's take this nested object as an example.</p>\n<pre><code class=\"language-js\">const user = {\n  id: 101,\n  email: 'jack@dev.com',\n  personalInfo: {\n    name: 'Jack',\n    address: {\n      line1: 'westwish st',\n      line2: 'washmasher',\n      city: 'wallas',\n      state: 'WX',\n    },\n  },\n}\n</code></pre>\n<p>To access the name of the our user, we'll write</p>\n<pre><code class=\"language-js\">const name = user.personalInfo.name\nconst userCity = user.personalInfo.address.city\n</code></pre>\n<p>This is easy and straight-forward.</p>\n<p>But, for some reason, if our user's personal info is not available, the object structure will be like this,</p>\n<pre><code class=\"language-js\">const user = {\n  id: 101,\n  email: 'jack@dev.com',\n}\n</code></pre>\n<p>Now if you try you access the name, you'll be thrown <em>Cannot read property 'name' of undefined</em>.</p>\n<pre><code class=\"language-js\">const name = user.personalInfo.name // Cannot read property 'name' of undefined\n</code></pre>\n<p>This is because we're trying to access <code>name</code> key from an object that does not exist.</p>\n<p>The usual way how most devs deal with this scenario is,</p>\n<pre><code class=\"language-js\">const name = user &#x26;&#x26; user.personalInfo ? user.personalInfo.name : null\n// undefined error will NOT be thrown as we check for existence before access\n</code></pre>\n<p>This is okay if your nested structure is simple, but if you have your data nested 5 or 6 levels deep, then your code will look really messy like this,</p>\n<pre><code class=\"language-js\">let city\nif (\n  data &#x26;&#x26;\n  data.user &#x26;&#x26;\n  data.user.personalInfo &#x26;&#x26;\n  data.user.personalInfo.addressDetails &#x26;&#x26;\n  data.user.personalInfo.addressDetails.primaryAddress\n) {\n  city = data.user.personalInfo.addressDetails.primaryAddress\n}\n</code></pre>\n<p>There are a few tricks to deal with this messy object structures.</p>\n<h2>Oliver Steele's Nested Object Access Pattern</h2>\n<p>This is my personal favorite as it makes the code look <em>clean</em> and <em>simple</em>. I picked this style from stackoverflow a while back and it is pretty catchy once you understand how it works.</p>\n<pre><code class=\"language-js\">const name = ((user || {}).personalInfo || {}).name\n</code></pre>\n<p>With this notation, you'll never run into <em>Cannot read property 'name' of undefined</em>. You basically check if user exists, if not, you create an empty object on the fly. This way, the next level key will <strong>always be accessed from an object that exists or an empty object</strong>, but never from undefined.</p>\n<p>Unfortunately, <strong>you cannot access nested arrays with this trick</strong></p>\n<h2>Access Nested Objects Using Array Reduce</h2>\n<p>Array reduce method is very powerful and it can be used to safely access nested objects.</p>\n<pre><code class=\"language-js\">const getNestedObject = (nestedObj, pathArr) => {\n  return pathArr.reduce(\n    (obj, key) => (obj &#x26;&#x26; obj[key] !== 'undefined' ? obj[key] : undefined),\n    nestedObj\n  )\n}\n\n// pass in your object structure as array elements\nconst name = getNestedObject(user, ['personalInfo', 'name'])\n\n// to access nested array, just pass in array index as an element the path array.\nconst city = getNestedObject(user, ['personalInfo', 'addresses', 0, 'city'])\n// this will return the city from the first address item.\n</code></pre>\n<h2>Typy</h2>\n<p>If you think the above methods are a lil' too mainstream, then you should try <a href=\"https://github.com/flexdinesh/typy\">Typy</a> library that I've written. In addition to safely accessing nested objects, it does many more awesome things. ðŸŽ‰</p>\n<p>It is available as an npm package - <a href=\"https://www.npmjs.com/package/typy\">Typy</a></p>\n<p>If you use <strong>Typy</strong>, your code will look like this,</p>\n<pre><code class=\"language-js\">import t from 'typy'\n\nconst name = t(user, 'personalInfo.name').safeObject\nconst city = t(user, 'personalInfo.addresses[0].city').safeObject\n// address is an array\n</code></pre>\n<p><em>Edit: There a few other libraries like Lodash and Ramda that can do this. But in light-weight front-end projects, especially if you're going to need only one or two methods from those libs, it's a good idea to opt for an alternative light-weight lib, or better, write your own.</em></p>\n<p>Happy 'safely accessing nested objects in JavaScript'! ðŸ’¥</p>","frontmatter":{"title":"Accessing Nested Objects in JavaScript","canonicalURL":"https://dev.to/flexdinesh/accessing-nested-objects-in-javascript--9m4","date":"Feb 10, 2018","noPage":null}}},"pageContext":{"slug":"/accessing-nested-objects-in-javascript/"}},"staticQueryHashes":["1381026181","3065158460"]}